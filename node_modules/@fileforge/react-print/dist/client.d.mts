import React, { ReactNode } from 'react';
import { MarkdownToJSX } from 'markdown-to-jsx';

interface CompileOptions {
    /**
     * Whether to use Emotion CSS.
     */
    emotion?: boolean;
}
declare const compile: (node: React.ReactElement, options?: CompileOptions) => Promise<string>;

/**
 * Returns the current page number.
 */
declare const PageNumber: ({ counterStyle, }: {
    /**
     * The style of the counter.
     */
    counterStyle?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the total number of pages.
 */
declare const PagesNumber: ({ counterStyle, }: {
    /**
     * The style of the counter.
     */
    counterStyle?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the current page's running header of level 1.
 */
declare const RunningH1: ({ before, after }: {
    before?: string | undefined;
    after?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the current page's running header of level 2.
 */
declare const RunningH2: ({ before, after }: {
    before?: string | undefined;
    after?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the current page's running header of level 3.
 */
declare const RunningH3: ({ before, after }: {
    before?: string | undefined;
    after?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the current page's running header of level 4.
 */
declare const RunningH4: ({ before, after }: {
    before?: string | undefined;
    after?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the current page's running header of level 5.
 */
declare const RunningH5: ({ before, after }: {
    before?: string | undefined;
    after?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the current page's running header of level 6.
 */
declare const RunningH6: ({ before, after }: {
    before?: string | undefined;
    after?: string | undefined;
}) => React.JSX.Element;

/**
 * Displays content in the top of all the pages.
 *
 * This component should be placed as early as possible in the document and will apply to all subsequent pages.
 */
declare const PageTop: (props: React.HTMLProps<HTMLDivElement>) => React.JSX.Element;
/**
 * Displays content in the top of the current page.
 *
 * This component will override the content of the `PageTop` component for the current page.
 */
declare const CurrentPageTop: (props: React.HTMLProps<HTMLDivElement>) => React.JSX.Element;
/**
 * Displays content in the bottom of all the pages.
 */
declare const PageBottom: (props: React.HTMLProps<HTMLDivElement>) => React.JSX.Element;
/**
 * Forces a page break.
 */
declare const PageBreak: (props: React.HTMLProps<HTMLDivElement>) => React.JSX.Element;
/**
 * Prevents a page break. Wrap this component around content that should not be broken across pages.
 */
declare const NoBreak: (props: React.HTMLProps<HTMLDivElement>) => React.JSX.Element;
/**
 * Floats the content to the bottom of the page.
 */
declare const FloatBottom: (props: any) => React.JSX.Element;

/**
 * Creates an automatically numbered footnote. This will remove the footnote content from the document flow and place it at the bottom of the page.
 */
declare const Footnote: ({ children, ...props }: {
    /**
     * The text to display in the footnote. This can be rich text.
     */
    children: React.ReactNode;
}) => React.JSX.Element;

declare const CSS: ({ children }: {
    children: string;
}) => React.JSX.Element;
declare const Font: ({ url }: {
    url: string;
}) => React.JSX.Element;
type MarginsProps = {
    pageRatio: string;
    top: string;
    right: string;
    left: string;
    bottom: string;
};
declare const Margins: ({ pageRatio, top, right, left, bottom, }: MarginsProps) => React.JSX.Element;

interface TocRendererProps {
    heading: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
    level: number;
    children: ReactNode;
    id: string;
}
interface MarkdownProps {
    children: string;
    tocRenderer?: (props: TocRendererProps) => ReactNode;
    options?: MarkdownToJSX.Options;
}
declare const Markdown: (props: MarkdownProps) => JSX.Element;

declare const Latex: ({ children }: {
    children: string;
}) => React.JSX.Element;

/**
 * Much of this code is taken from the Resend react-email implementation of the Tailwind support.
 * Credits to the original author.
 */

declare const Tailwind: ({ children, config, }: {
    /**
     * The children of the Tailwind component. Components will have access to the Tailwind CSS classes.
     */
    children: React.ReactNode;
    /**
     * A custom Tailwind config to use for this component.
     * See all available options at https://tailwindcss.com/docs/configuration
     *
     * NB: The `content` option is automatically set to the children of the Tailwind component.
     */
    config?: any;
}) => React.JSX.Element;

declare const availableFields: {
    signHere: string;
    signHereOptional: string;
    signInitialHere: string;
    signInitialHereOptional: string;
    company: string;
    dateSigned: string;
    title: string;
    fullName: string;
    lastName: string;
    firstName: string;
    emailAddress: string;
    number: string;
    date: string;
    ssn: string;
    zip5: string;
    zip5dash4: string;
    note: string;
    list: string;
    checkbox: string;
    radio: string;
    approve: string;
    decline: string;
    view: string;
    signerAttachment: string;
    signerAttachmentOptional: string;
};
type fieldTypes = keyof typeof availableFields;
declare const Field: ({ type, signee, ...props }: {
    type: fieldTypes;
    signee: string;
} & React.InputHTMLAttributes<HTMLInputElement>) => React.JSX.Element;

export { CSS, type CompileOptions, CurrentPageTop, Field, FloatBottom, Font, Footnote, Latex, Margins, Markdown, NoBreak, PageBottom, PageBreak, PageNumber, PageTop, PagesNumber, RunningH1, RunningH2, RunningH3, RunningH4, RunningH5, RunningH6, Tailwind, compile };
